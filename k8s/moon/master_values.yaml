clusterZone: "cluster.local"
controller:
  componentName: "jenkins-master"
  image: "jenkins/jenkins" # official jenkins image
  tag: "2.263.3"
  imagePullPolicy: "Always" # always pull jenkins image even if exists
  imagePullSecretName:
  lifecycle:
  numExecutors: 0
  customJenkinsLabels: []
  adminSecret: true

  enableXmlConfig: true
  securityRealm: |-
    <securityRealm class="hudson.security.LegacySecurityRealm"/>
  authorizationStrategy: |-
     <authorizationStrategy class="hudson.security.FullControlOnceLoggedInAuthorizationStrategy">
       <denyAnonymousReadAccess>true</denyAnonymousReadAccess>
     </authorizationStrategy>
  hostNetworking: false
  # login user for Jenkins
  adminUser: "admin"
  rollingUpdate: {}
  resources:
    requests:
      cpu: "50m"
      memory: "256Mi"
    limits:
      cpu: "2000m"
      memory: "2048Mi"
  usePodSecurityContext: true
  servicePort: 8080
  targetPort: 8080
  serviceType: NodePort # since we are using minikube this will be NodePort, on a different setup I would use ClusterIP with another ingress service
  serviceAnnotations: {}
  deploymentLabels: {}
  serviceLabels: {}
  podLabels: {}
  # NodePort for Jenkins Service
  nodePort: 32000
  healthProbes: true
  healthProbesLivenessTimeout: 5
  healthProbesReadinessTimeout: 5
  healthProbeLivenessPeriodSeconds: 10
  healthProbeReadinessPeriodSeconds: 10
  healthProbeLivenessFailureThreshold: 5
  healthProbeReadinessFailureThreshold: 3
  healthProbeLivenessInitialDelay: 90
  healthProbeReadinessInitialDelay: 60
  agentListenerPort: 50000
  agentHostPort:
  disabledAgentProtocols:
    - JNLP-connect
    - JNLP2-connect
  csrf:
    defaultCrumbIssuer:
      enabled: true
      proxyCompatability: true
  cli: false
  agentListenerServiceType: "ClusterIP"
  agentListenerServiceAnnotations: {}
  agentKubernetesNamespace:
  loadBalancerSourceRanges:
  - 0.0.0.0/0
  extraPorts: []
  installPlugins:
    - kubernetes:1.19.0 # for integrating with k8s cluster
    - workflow-aggregator:2.6
    - workflow-job:2.35
    - credentials-binding:1.20
    - git:3.12.1 # for git integration
    - greenballs:1.15

  enableRawHtmlMarkupFormatter: false
  scriptApproval: []
  initScripts: []
  jobs: {}
  JCasC:
    enabled: false
    defaultConfig: false
    #pluginVersion: "1.27"
    supportPluginVersion: "1.18"
    configScripts: {}
  customInitContainers: []
  sidecars:
    configAutoReload:
      enabled: false
      image: kiwigrid/k8s-sidecar:0.1.20
      imagePullPolicy: IfNotPresent
      resources: {}
      sshTcpPort: 1044
      folder: "/var/jenkins_home/casc_configs"
    other: []
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  customConfigMap: false
  overwriteConfig: false
  overwriteJobs: false

  ingress:
    enabled: false
    apiVersion: "extensions/v1beta1"
    labels: {}
    annotations: {}
    hostName:
    tls:
  backendconfig:
    enabled: false
    apiVersion: "extensions/v1beta1"
    name:
    labels: {}
    annotations: {}
    spec: {}

  route:
    enabled: false
    labels: {}
    annotations: {}

  additionalConfig: {}
  hostAliases: []

  prometheus:
    enabled: false
    serviceMonitorAdditionalLabels: {}
    scrapeInterval: 60s
    scrapeEndpoint: /prometheus
    alertingRulesAdditionalLabels: {}
    alertingrules: []

  testEnabled: true

agent:
  enabled: false
  image: "jenkins/jnlp-agent"
  tag: "3.27-1"
  customJenkinsLabels: []
  imagePullSecretName:
  componentName: "jenkins-agent"
  privileged: false
  resources:
    requests:
      cpu: "512m"
      memory: "512Mi"
    limits:
      cpu: "512m"
      memory: "512Mi"
  alwaysPullImage: false
  podRetention: "Never"
  envVars: []
  # mount docker in agent pod
  volumes:
    - type: HostPath
      hostPath: /var/run/docker.sock
      mountPath: /var/run/docker.sock
  nodeSelector: {}
  command:
  args:
  sideContainerName: "jnlp"
  TTYEnabled: false
  containerCap: 10
  podName: "default"
  idleMinutes: 0
  yamlTemplate: ""

persistence:
  enabled: false
  existingClaim:
  storageClass: jenkins-pv
  annotations: {}
  accessMode: "ReadWriteOnce"
  size: "1Gi"
  volumes:
  mounts:

networkPolicy:
  enabled: false
  apiVersion: networking.k8s.io/v1

rbac:
  create: true
  readSecrets: false

serviceAccount:
  create: true
  name:
  annotations: {}

serviceAccountAgent:
  create: false
  name:
  annotations: {}

backup:
  enabled: false
  componentName: "backup"
  schedule: "0 2 * * *"
  annotations:
    iam.amazonaws.com/role: "jenkins"
  image:
    repository: "maorfr/kube-tasks"
    tag: "0.2.0"
  extraArgs: []
  existingSecret: {}
  env:
  - name: "AWS_REGION"
    value: "us-east-1"
  resources:
    requests:
      memory: 1Gi
      cpu: 1
    limits:
      memory: 1Gi
      cpu: 1
  destination: "s3://jenkins-data/backup"
checkDeprecation: true